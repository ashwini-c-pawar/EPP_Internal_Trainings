1) What is Composision, Association, Aggregation 
	 Association : Association is how objects are related to each other
		    Composition and aggregation are two types of association
	Composision : strong association ( e.g Person and Heart )
	Aggregation : weak association (e.g Team and Player )


2) @Override 
	Why we use if its optional::
	1) If programmer makes any mistake such as wrong method name, wrong parameter types while overriding, you would get a compile time error. As by using this annotation you instruct compiler that you are overriding this method. If you donâ€™t use the annotation then the sub class method would behave as a new method (not the overriding method) in sub class.
	2) It improves the readability of the code. So if you change the signature of overridden method then all the sub classes that overrides the particular method would throw a compilation error, which would eventually help you to change the signature in the sub classes. If you have lots of classes in your application then this annotation would really help you to identify the classes that require changes when you change the signature of a method.

3) Overloading - return type is used or not
	The compiler does not consider the return type while differentiating the overloaded method

